Volatility 3 – Windows 

Detalhes sobre os plugins:

vol.py --info
https://github.com/volatilityfoundation/volatility?tab=readme-ov-file
https://volatility3.readthedocs.io/en/latest/

** Sistema Operacional

Informações sobre SO
python .\vol.py -f "/caminho/para/imagem" windows.info
python.exe .\vol.py -f "/caminho/para/imagem" windows.info

Exemplo:
python .\vol.py -f C:\Users\faruk\Downloads\memdump.mem windows.info

Variáveis ​​de ambiente
python .\vol.py -f "/caminho/para/imagem" windows.envars

Usuários conectados
python .\vol.py -f "/caminho/para/imagem" windows.sessions.Sessions

-- Mostrar registros
python .\vol.py -f "/caminho/para/imagem" windows.registry.hivescan

Listar raízes:
python .\vol.py -f "/caminho/para/imagem" windows.registry.hivelist

Listar raízes e obter subchaves iniciais:
python .\vol.py -f "/caminho/para/imagem" windows.registry.printkey.PrintKey

Imprimir chave:
python .\vol.py -f "/caminho/para/imagem" windows.registry.printkey.PrintKey --key "Software\Microsoft\Windows NT\VersãoAtual"

-- Listar serviços
python .\vol.py -f "/caminho/para/imagem" windows.svcscan.SvcScan

Listar tarefas agendadas
python .\vol.py -f "/caminho/para/imagem" windows.registry.scheduled_tasks.ScheduledTasks

Encontrar comandos executados
python .\vol.py -f "/caminho/para/imagem" windows.cmdline

Os comandos inseridos em cmd são processados ​​por conhost (csrss antes do Windows 7). Portanto, mesmo que um invasor consiga encerrar o cmd antes de obtermos um despejo (dump) de memória, ainda há uma chance de recuperar o histórico da linha de comando da memória do conhost. Se encontrar algo estranho, tente despejar (dump) a memória do processo associado ao conhost e procure por strings dentro para extrair as linhas de comando.

** Processos / Programas

-- Listar processos
python .\vol.py -f "/caminho/para/imagem" windows.pslist
python .\vol.py -f "/caminho/para/imagem" windows.psscan
python .\vol.py -f "/caminho/para/imagem" windows.pstree

Variáveis ​​de ambiente
python .\vol.py -f "/caminho/para/imagem" windows.envars --pid <PID>

Despejar a memória do processo
python .\vol.py -f "/caminho/para/imagem" -o "/caminho/de/saída" windows.memmap.Memmap --pid <PID> --dump

Despejar as DLLs e o EXE associados a um processo
python .\vol.py -f "/caminho/para/imagem" -o "/caminho/para/diretório" windows.dumpfiles ‑‑pid <PID>

Extrair as páginas de memória de um processo
Extrair todas as páginas armazenados na memória em um único arquivo.

python .\vol.py -f "/caminho/para/imagem" -o "/caminho/para/diretório" windows.memmap ‑‑dump ‑‑pid <PID>

Extrair os "Handles" de um processo
python .\vol.py -f "/caminho/para/imagem" windows.handles ‑‑pid <PID>

Um handle é uma estrutura que permite definir um objeto (arquivo, socket, pipe, área de memória compartilhada, etc.) e, em seguida, manipulá-lo. Handles podem ser compartilhados por vários processos.

DLLs carregadas por um processo
python .\vol.py -f "/caminho/para/imagem" windows.dlllist ‑‑pid <PID>
python .\vol.py -f "/caminho/para/imagem" windows.ldrmodules.LdrModules --pid <PID>

DLLs descarregadas
python .\vol.py -f "/caminho/para/imagem" windows.unloadedmodules

** Rede

Mostrar conexões de rede
python .\vol.py -f "/caminho/para/imagem" windows.netscan
python .\vol.py -f "/caminho/para/imagem" windows.netstat

** Arquivos
Listar arquivos
python .\vol.py -f "/caminho/para/imagem" windows.filescan

-- Extrair arquivos
Todos os arquivos encontrados
python .\vol.py -f "/caminho/para/imagem" -o "/caminho/para/diretório" windows.dumpfiles

Deslocamento da memória virtual:

python .\vol.py -f "/caminho/para/imagem" -o "/caminho/para/diretório" windows.dumpfiles ‑‑virtaddr <deslocamento>

Deslocamento da memória física:

python .\vol.py -f "/caminho/para/imagem" -o "/caminho/para/diretório" windows.dumpfiles ‑‑physaddr <deslocamento>

** Análise de malware

Espaços de memória suspeitos:
python .\vol.py -f "/caminho/para/imagem" windows.malfind

YARASCAN - https://github.com/abr4xc/YaraScan

python .\vol.py -f "/caminho/para/imagem" windows.vadyarascan ‑‑yara-rules <string>
python .\vol.py -f "/caminho/para/imagem" windows.vadyarascan ‑‑yara-file "/caminho/para/arquivo.yar"
python .\vol.py -f "/caminho/para/imagem" yarascan.yarascan ‑‑yara-file "/caminho/para/arquivo.yar"

Chamadas de função
windows.iat.IAT --pid <PID>

Tabela de chamadas ao sistema
python .\vol.py -f "/caminho/para/imagem" windows.ssdt.SSDT

** Injeção de threads suspeitas
- Procurar thread com Win32StartAddress = N/A
- Procurar threads que não tenham um Win32StartAddress nos mesmos espaços de memória que outras
- Procurar suspeitas Win32StartPath ou StartPath (‘-’, dll suspeita)

python .\vol.py -f "/caminho/para/imagem" windows.suspicious_threads --pid <PID>
python .\vol.py -f "/caminho/para/imagem" windows.threads| grep <PID>

Threads suspensos
python .\vol.py -f "/caminho/para/imagem" windows.suspended_threads.SuspendedThreads | grep <PID>

Injeção de DLL
- Procurar DLLs com MappedPath suspeito
- Se MappedPath for N/A, a região de memória pode não ter um backup claro no disco (pode ser shellcode injetado ou DLLs mapeadas manualmente).
- InLoad, InInit e InMem = False (Isso significa que o módulo não está vinculado a nenhuma das listas de DLL esperadas)

python .\vol.py -f "/caminho/para/imagem" windows.ldrmodules.LdrModules --pid <PID>

Processos vazios
python .\vol.py -f "/caminho/para/imagem" windows.hollowprocesses

Mutex
python .\vol.py -f "/caminho/para/imagem" windows.mutantscan.MutantScan

Páginas de memória
python .\vol.py -f "/caminho/para/imagem" windows.vadwalk.VadWalk --pid <PID>
python .\vol.py -f "/caminho/para/imagem" windows.vadinfo.VadInfo --pid <PID>

Persistência do kernel
python .\vol.py -f "/caminho/para/imagem" windows.driverscan

# Identificar drivers potenciais ocultos por rootkits
python .\vol.py -f "/caminho/para/imagem" windows.drivermodule.DriverModule

python .\vol.py -f "/caminho/para/imagem" windows.callbacks.Callbacks

#Módulos ocultos do kernel
python .\vol.py -f "/caminho/para/imagem" windows.modscan

python .\vol.py -f "/caminho/para/imagem" windows.driverirp.DriverIrp
python .\vol.py -f "/caminho/para/imagem" windows.devicetree.DeviceTree

-- Secrets (Segredos)

Extrai hashes do usuário da memória
python .\vol.py -f "/caminho/para/imagem" windows.registry.hashdump.Hashdump

Extrai secrets LSA da memória
python .\vol.py -f "/caminho/para/imagem" windows.registry.cachedump.Cachedump
python .\vol.py -f "/caminho/para/imagem" windows.registry.lsadump.Lsadump

Senha em cache do TrueCrypt
python .\vol.py -f "/caminho/para/imagem" windows.truecrypt.Senha

** Outros
-- Artefatos
python .\vol.py -f "/caminho/para/imagem" windows.shimcache
python .\vol.py -f "/caminho/para/imagem" windows.registry.amcache.Amcache

# Verifica se há objetos de ARQUIVO MFT presentes na memória
python .\vol.py -f "/caminho/para/imagem" windows.mftscan.MFTScan

# Verifica se há fluxo de dados alternativo
python .\vol.py -f "/caminho/para/imagem" windows.mftscan.ADS

# Verifica e analisa possíveis Registros Mestres de Inicialização (MBRs)
python .\vol.py -f "/caminho/para/imagem" windows.mbrscan.MBRScan

# Verifica se há Registros MFT com Dados Residentes
python .\vol.py -f "/caminho/para/imagem" windows.mftscan.ResidentData

Certificados no Armazenamento de Certificados do registro
python .\vol.py -f "/caminho/para/imagem" windows.registry.certificates.Certificates

Pesquisa de strings
strings -n <tamanho-min-string> <binário>


Mindmap

https://hacktivity.fr/wp-content/uploads/2024/04/python .\vol.py-3-for-Windows-Cheatsheet-scaled.jpg

Fonte: python .\vol.py 3 commands mind map | made with markdown-map.com
